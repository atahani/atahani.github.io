<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Android on بلاگ احمد طحانی</title>
    <link>http://atahani.com/tags/android/</link>
    <description>Recent content in Android on بلاگ احمد طحانی</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>fa</language>
    <copyright>Ahmad Tahani</copyright>
    <lastBuildDate>Fri, 03 Jun 2016 16:36:02 +0430</lastBuildDate>
    <atom:link href="http://atahani.com/tags/android/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>خداحافظ SQLite ، سلام بر Realm</title>
      <link>http://atahani.com/realm-android</link>
      <pubDate>Fri, 03 Jun 2016 16:36:02 +0430</pubDate>
      
      <guid>http://atahani.com/realm-android</guid>
      <description>&lt;p align=&#34;justify&#34;&gt;
  اول یه چیزی رو صادقانه بگم اونم اینکه اصلاً تاکنون از &lt;code&gt;SQLite&lt;/code&gt; برای ذخیره‌سازی اطلاعات در اندروید استفاده نکردم (پس لازم نیست باهاش خدافظی کنم  😬) دلیل آن هم این بود که از اول دنبال یه روشی مثل &lt;code&gt;Linq To SQL&lt;/code&gt; در دات‌نت بودم، که درگیر دستورات &lt;code&gt;SQL&lt;/code&gt; نشوم، به صورت اتفاقی با &lt;a href=&#34;https://realm.io/docs/java/latest/&#34;&gt;Realm&lt;/a&gt; آشنا شدم، در یک کلام می‌شه گفت فوق‌العادست! ایده‌اش این است که شما درگیر دستورات &lt;code&gt;SQL&lt;/code&gt; نشوید و مثل &lt;code&gt;ORM&lt;/code&gt; ها به ازای هر جدول یک کلاس در نظر بگیرید، در این حالت اگر بخواهید رکوردی داخل آن جدول وارد کنید باید یک شئ از آن کلاس ایجاد کرده و بعد بهش بگویید که این شئ را داخل دیتابیس ذخیره کن، به همین سادگی ! در ادامه یک سری نکات راجع به استفاده از &lt;code&gt;Realm&lt;/code&gt; در اندروید آورده شده است:
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  &lt;h3 id=&#34;پیش-نیاز-استفاده-از-realm&#34;&gt;پیش‌نیاز استفاده از Realm&lt;/h3&gt;

&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  &lt;h5 id=&#34;قدم-اول-اضافه-کردن-پلاگین-gradle-در-فایل-پروژه&#34;&gt;قدم اول: اضافه کردن پلاگین &lt;code&gt;Gradle&lt;/code&gt; در فایل پروژه&lt;/h5&gt;

&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath &amp;quot;io.realm:realm-gradle-plugin:{% render_version %}&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;justify&#34;&gt;
  به جای &lt;code&gt;render_version&lt;/code&gt; همان وروژن &lt;code&gt;1.0&lt;/code&gt; می‌شود که به تازگی منتشر شده است، استفاده از &lt;code&gt;Realm&lt;/code&gt; باعث می‌شود برنامه‌ی اندروید شما حدود &lt;code&gt;800KB&lt;/code&gt; چاق‌تر بشود، که خیلی نگران‌ کننده نیست  😙
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  &lt;h5 id=&#34;قدم-دوم-در-فایل-build-gradle-داخل-دایرکتوری-اپلیکیشن-پلاگین-realm-رو-اضافه-می-کنیم&#34;&gt;قدم دوم: در فایل &lt;code&gt;build.gradle&lt;/code&gt; داخل دایرکتوری اپلیکیشن پلاگین &lt;code&gt;Realm&lt;/code&gt; رو اضافه می‌کنیم&lt;/h5&gt;

&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;apply plugin: &#39;realm-android&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;justify&#34;&gt;
  &lt;h4 id=&#34;اضافه-کردن-یک-رکورد-در-دیتابیس&#34;&gt;اضافه کردن یک رکورد در دیتابیس&lt;/h4&gt;

&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;public class Person extends RealmObject {
    @PrimaryKey
    private long id;
    private String name;

    public Person(long id, String name) {
        this.id = id;
        this.name = name;
    }

    // ... Generated getters and setters ...
}

// Create a RealmConfiguration that saves the Realm file in the app&#39;s &amp;quot;files&amp;quot; directory.
RealmConfiguration realmConfig = new RealmConfiguration.Builder(context).build();
Realm.setDefaultConfiguration(realmConfig);

// Get a Realm instance for this thread
Realm realm = Realm.getDefaultInstance();

// Persist your data in a transaction
realm.beginTransaction();
Person person = realm.createObject(Person.class);
person.setName(&amp;quot;ahmad&amp;quot;);
realm.commitTransaction();
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;justify&#34;&gt;
  &lt;h3 id=&#34;کوئری-گرفتن&#34;&gt;کوئری گرفتن&lt;/h3&gt;

&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  می‌توانید همه جور کوئری روی اطلاعات داشته باشید، از اعمال ساده مثل &lt;code&gt;AND&lt;/code&gt; یا &lt;code&gt;SORT&lt;/code&gt; بگیر تا &lt;code&gt;Aggregation&lt;/code&gt; مثل &lt;code&gt;average&lt;/code&gt;
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  به عنوان مثال دستور زیر تمامی اشخاصی که بین ۱۳ تا ۲۰ سال سن دارند را از دیتابیس در قالب یک لیست می‌گیرد.
&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;RealmResults&amp;lt;User&amp;gt; teenagers = realm.where(User.class).between(&amp;quot;age&amp;quot;, 13, 20).findAll();
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;justify&#34;&gt;
  برای اطلاعات بیشتر حتماً &lt;a href=&#34;https://realm.io/docs/java/latest/#queries&#34;&gt;داکیونت آن&lt;/a&gt; را به دقت مطالعه فرمایید!
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  &lt;h3 id=&#34;گوش-به-زنگ-باشیم-که-چه-زمانی-اطلاعات-در-دیتابیس-تغییر-می-کند&#34;&gt;گوش به زنگ باشیم که چه زمانی اطلاعات در دیتابیس تغییر می‌کند!&lt;/h3&gt;

&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  شاید بتوان گفت بهترین قابلیت &lt;code&gt;Realm&lt;/code&gt; این است که شما می‌توانید تغییرات اطلاعات را رصد کنید، فوق‌العادست، به عنوان مثال می‌توان برنامه را اینگونه پیاده سازی کرد که هنگام دریافت اطلاعات جدید از سوی سرور آن‌ها را داخل دیتابیس ذخیره شود و بعد چون تغییرات را دائماً در دیتابیس رصد می‌شود به صورت لحظه‌ای تغییرات مورد نظر در UI پدیدار می‌شود، در این شرایط در هنگام دریافت &lt;code&gt;Notification&lt;/code&gt;  دیگر لازم نیست اطلاعات آن را با تکنیک &lt;code&gt;Broadcast Intent&lt;/code&gt; به تمامی activity‌ها ارسال کرد &amp;hellip;! در کل نحوه‌ی &lt;code&gt;Sync&lt;/code&gt; اطلاعات در اپلیکیشن خیلی ساده‌تر خواهد شد.
&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;public class MyActivity extends Activity {
    private Realm realm;
    private RealmChangeListener realmListener;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
      super.onCreate(savedInstanceState);
      realm = Realm.getDefaultInstance();
      realmListener = new RealmChangeListener() {
        @Override
        public void onChange(Realm realm) {
            // ... do something with the updates (UI, etc.) ...
        }};
      realm.addChangeListener(realmListener);
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        // Remove the listener.
        realm.removeChangeListener(realmListener);
        // Close the Realm instance.
        realm.close();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;justify&#34;&gt;
  &lt;h3 id=&#34;انواع-transaction-ها&#34;&gt;انواع Transaction ها&lt;/h3&gt;

&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  اکثر توسعه‌دهندگان از جمله خود من درست &lt;a href=&#34;https://realm.io/docs/java/latest/#writes&#34;&gt;داکیومنت مربوطه‌&lt;/a&gt; را نمی‌خوانند و از &lt;code&gt;Transaction&lt;/code&gt; مناسب استفاده نمی‌کنند، به عنوان مثال تصور کنید می‌خواهید اطلاعاتی که به صورت &lt;code&gt;Async&lt;/code&gt; از سرور دریافت می‌کنید را ذخیره کنید، برای این کار حتماً باید از این &lt;code&gt;Asynchronous Transactions&lt;/code&gt; استفاده کنید، اگر از این روش استفاده نکنید،‌ اپلیکیشن شما بعضی مواقع با خطا روبه‌رو خواهد شد.
&lt;/p&gt;


&lt;pre&gt;&lt;code&gt;realm.executeTransactionAsync(new Realm.Transaction() {
            @Override
            public void execute(Realm bgRealm) {
                User user = bgRealm.createObject(User.class);
                user.setName(&amp;quot;John&amp;quot;);
                user.setEmail(&amp;quot;john@corporation.com&amp;quot;);
            }
        }, new Realm.Transaction.OnSuccess() {
            @Override
            public void onSuccess() {
                // Transaction was a success.
            }
        }, new Realm.Transaction.OnError() {
            @Override
            public void onError(Throwable error) {
                // Transaction failed and was automatically canceled.
            }
        });
&lt;/code&gt;&lt;/pre&gt;

&lt;p align=&#34;justify&#34;&gt;
  &lt;h3 id=&#34;سخن-آخر&#34;&gt;سخن آخر&lt;/h3&gt;

&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  استفاده از &lt;code&gt;Realm&lt;/code&gt; خیلی هیجان انگیزه، ولی باید به این نکته توجه داشته باشید که به صورت صحیح از آن استفاده کنید و حتماً تمامی &lt;a href=&#34;https://realm.io/docs/java/latest&#34;&gt;داکیومنت&lt;/a&gt; آن را به دقت بخوانید (خیلی زیاد نیست، حدود یک ساعت وقت می‌گیرد)، از سال ۲۰۱۲ تاکنون افراد خیلی زیادی روی این &lt;a href=&#34;https://github.com/realm&#34;&gt;پروژه‌ی متن‌باز&lt;/a&gt; فعالیت داشته‌اند، هم اکنون این پروژه برای پلتفرم‌های مختلف مثل ios و یا xamarin نیز توسعه یافته است، و جالب اینکه فایل دیتابیس تولید شده در تمامی پلتفرم‌ها یکسان می‌باشد! شرکت‌های بزرگی مثل توییتر از &lt;code&gt;Realm&lt;/code&gt; استفاده می‌کنند، پس جای نگرانی نیست و می‌تواند تمامی نیازهای شما را برطرف نماید.
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  پ‌ن: تمامی نمونه کدها از داکیومنت اصلی آورده شده است.😗
&lt;/p&gt;

</description>
    </item>
    
    <item>
      <title>تجربه‌ی توسعه اندروید در پروژه‌ی تلپاتی</title>
      <link>http://atahani.com/telepathy-android</link>
      <pubDate>Sat, 19 Mar 2016 23:41:52 +0330</pubDate>
      
      <guid>http://atahani.com/telepathy-android</guid>
      <description>

&lt;p align=&#34;justify&#34;&gt;
  قبلاً در مورد  &lt;a href=&#34;http://atahani.com/telepathy-project&#34;&gt;تجربیات عمومی به دست آمده در پروژه‌ی تلپاتی&lt;/a&gt; و همچنین در مورد  &lt;a href=&#34;http://atahani.com/telepathy-backend-with-nodejs&#34;&gt;بک‌اند این پروژه&lt;/a&gt; مطالبی نوشتم، حالا می‌خواهم در مورد برنامه‌ی اندروید نکاتی را با شما در میان بگذارم.
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  حدود یک سال هست که وارد دنیای توسعه اندروید شدم، هر توسعه‌دهنده‌ی اندرویدی این موضوع را می‌داند که توسعه یک برنامه ‌برای دستگاه‌های مختلف در این پلتفرم کار دشواری است چرا که تولید‌کنندگان گوشی‌های مختلف نظیر هوآوی و یا سامسونگ تغییرات زیادی در اندروید به وجود می‌آورند که در این حالت شما نمی‌توانید انتظار داشته باشید برنامه‌ی شما در تمامی این گوشی‌ها به درستی کار کند ! برای همین توسعه‌دهندگان اندروید به این مهم رسیده‌اند که &amp;ldquo;در توسعه اندروید هیچ چیز قطعی نیست !&amp;rdquo;
&lt;/p&gt;


&lt;h3 id=&#34;گزارش-خطا&#34;&gt;گزارش خطا&lt;/h3&gt;

&lt;p align=&#34;justify&#34;&gt;
  متأسفانه در کافه‌بازار امکان گزارش خطا وجود ندارد و همین امر باعث می‌شود توسعه‌دهنده به درستی متوجه خطاهای رخ داده نشود، البته در گوگل پلی نیز که این امکان وجود دارد کاربران هنگام بسته شدن برنامه معمولاً گزینه‌ی گزارش خطا را انتخاب نمی‌کنند ! پس در این صورت شما به عنوان توسعه‌دهنده از خطاهای رخ داده اطلاع نخواهید داشت و در مقابل برای رفع آن مشکلات نمی‌توانید اقدام لازمه را انجام دهید، پس گزارش‌گیری از خطاها یک امر مهمی محسوب می‌شود، هنگام بروز خطا در بیشتر برنامه‌ها نظیر تلگرام، تمامی اطلاعات مربوط به خطا (full stack trace) درون فایلی ذخیره شده و در زمان مناسب به سرور منتقل خواهد شد، که خوب این کار درست و عقلانی به نظر می‌رسد، چرا که در صورت پیاده‌سازی درست می‌توان این فایل‌های متنی را به فرمت &lt;code&gt;csv&lt;/code&gt; درآورده و اطلاعات مورد نیاز را از آن استخراج نمود.
&lt;/p&gt;


&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;
  من از روش ساده‌تری استفاده کردم، شما می‌توانید با ساختن یک &lt;a href=&#34;https://api.slack.com/bot-users&#34;&gt;Slack bot user&lt;/a&gt; به صورت اتوماتیک پیامی در &lt;code&gt;Channel&lt;/code&gt; دلخواه خود ارسال کنید، پس یک کانال برای گزارش خطا ایجاد کردم، و تنظیم کردم که هنگام بروز خطا با استفاده از یک ‍‍‍‍&lt;code&gt;HTTP&lt;/code&gt; متد کلیه اطلاعات خطا را در کانال مربوطه منتشر کند، این یک روش نسبتاً اصولی و ساده‌ای است که به راحتی می‌توانید به صورت لحظه‌ای از بروز خطاهای برنامه اطلاع داشته باشید.
&lt;/p&gt;
&lt;/p&gt;

&lt;p align=&#34;justify&#34;&gt;
  من از روش ساده‌تری استفاده کردم، شما می‌توانید با ساختن یک &lt;a href=&#34;https://api.slack.com/bot-users&#34;&gt;Slack bot user&lt;/a&gt; به صورت اتوماتیک پیامی در &lt;code&gt;Channel&lt;/code&gt; دلخواه خود ارسال کنید، پس یک کانال برای گزارش خطا ایجاد کردم، و تنظیم کردم که هنگام بروز خطا با استفاده از یک ‍‍‍‍&lt;code&gt;HTTP&lt;/code&gt; متد کلیه اطلاعات خطا را در کانال مربوطه منتشر کند، این یک روش نسبتاً اصولی و ساده‌ای است که به راحتی می‌توانید به صورت لحظه‌ای از بروز خطاهای برنامه اطلاع داشته باشید.
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  چون برنامه را روی دستگاه‌های مختلف تست نکرده بودم، دائما از گوشی‌های عجیب و غریب بیشتر از برند (huawei, lenovo) خطا دریافت می‌کردم، ولی در عوض چون اطلاعات خوبی از خطاها داشتم توانستم طی دو نسخه تقریباً تمامی خطا را رفع کنم، پس حتماً برای قسمت‌هایی که احتمال خطا می‌دهید (try/catch) بنویسید و همچنین از (unhandled exception) ها نیز گزارش تهیه کنید، توجه داشته باشید به همراه توضیحات خطا، اطلاعات دستگاه (نام، نسخه‌ی اندروید،نسخه‌ی برنامه، &amp;hellip;) را نیز ارسال کنید تا بهترین درک را از خطای رخ داده داشته باشید !
&lt;/p&gt;


&lt;h3 id=&#34;استفاده-از-realm&#34;&gt;استفاده از Realm&lt;/h3&gt;

&lt;p align=&#34;justify&#34;&gt;
  استفاده از &lt;a href=&#34;https://realm.io/docs/java/latest/&#34;&gt;Realm&lt;/a&gt; به عنوان دیتابیس داخلی در مقابل ‍‍&lt;code&gt;sqlite&lt;/code&gt; خیلی لذت بخش خواهد بود چرا که به راحتی می‌توانید مثل یک &lt;a href=&#34;https://en.wikipedia.org/wiki/Object-relational_mapping&#34;&gt;ORM&lt;/a&gt; رکوردهای ذخیره شده ‍‍را در قالب ‍‍&lt;code&gt;Java Object&lt;/code&gt; داشته باشید و همچنین به راحتی اعمالی نظیر &lt;code&gt;sort&lt;/code&gt; ، ‍‍&lt;code&gt;search&lt;/code&gt; ، ‍‍&lt;code&gt;aggregation&lt;/code&gt; بر روی &lt;code&gt;Data&lt;/code&gt; مورد نظر خواهید داشت که این خیلی لذت بخش خواهد بود.
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  پیشنهاد من این است که حتماً خیلی خوب داکیونت این لایبری را بخوانید، چون این لایبری هنوز به صورت کامل پایدار نشده و دائم در حال تغییر است.
&lt;/p&gt;


&lt;h3 id=&#34;استفاده-از-retrofit&#34;&gt;استفاده از Retrofit&lt;/h3&gt;

&lt;p align=&#34;justify&#34;&gt;
  برای ارتباط با سرور&lt;code&gt;REST API&lt;/code&gt; از ورژن &lt;code&gt;1.9&lt;/code&gt; لایبری &lt;a href=&#34;square.github.io/retrofit/&#34;&gt;Retrofit&lt;/a&gt; استفاده شده، ورژن ۱ این لایبری مشکلاتی را به همراه داشت، به عنوان مثال خطاهای &lt;code&gt;HTTP&lt;/code&gt; و &lt;code&gt;request timeout&lt;/code&gt; درون یک &lt;code&gt;Callback&lt;/code&gt; بررسی می‌شود و همین امر باعث می‌شد تا در بعضی مواقع به اشتباه مشکلات شبکه‌ای را خطاهای &lt;code&gt;HTTP&lt;/code&gt; در نظر بگیرد ! ، در ورژن ۲ این لایبری تا حدود زیادی این مشکلات برطرف شده است.
&lt;/p&gt;


&lt;p align=&#34;justify&#34;&gt;
  برای اطلاعات بیشتر درباره‌ی لایبری &lt;code&gt;Retrofit&lt;/code&gt; می‌توانید،  &lt;a href=&#34;http://atahani.com/retrofit-tutorial&#34;&gt;دوره‌ای که به عنوان عیدی&lt;/a&gt; درست کرده‌ام را ببینید.
&lt;/p&gt;


&lt;h3 id=&#34;زبان-جاوا-در-توسعه-ی-اندروید&#34;&gt;زبان جاوا در توسعه‌ی اندروید&lt;/h3&gt;

&lt;p align=&#34;justify&#34;&gt;
  قبلاً که عشق مایکروسافت بودم، با زبان شی‌گرا سی‌شارپ کار میکردم، زبان جاوا در مقایسه با سی‌شارپ به صورت بهتری اصول شی‌گرایی را پوشش می‌دهد، ولی در روند توسعه اندروید، جاوا دردسرهای خودش را خواهد داشت، به عنوان مثال اغلب با خطای &lt;code&gt;null exception&lt;/code&gt; روبه رو خواهید شد که برای جلوگیری از این مشکل باید دائم چک کنید که آیا کلاس مورد نظر &lt;code&gt;null&lt;/code&gt; است یا نه، و یا برای فیلتر کردن یک لیست از اشیا مجبور خواهیم بود از لایبری‌های دیگری استفاده کنیم، به تازگی زبان جدید  &lt;a href=&#34;https://kotlinlang.org/&#34;&gt;kotlin&lt;/a&gt; این مشکلات را بر طرف کرده و با نگرش جدیدی، روند توسعه‌ی اندروید و به کل برنامه‌های جاوایی را بهبود بخشیده، اگر توسعه‌دهنده اندروید هستید حتماً نگاهی به این زبان داشته باشید !
&lt;/p&gt;


&lt;p&gt;&lt;p align=&#34;justify&#34;&gt;
  برنامه‌ی اندروید تلپاتی به صورت کامل در &lt;a href=&#34;https://github.com/atahani/telepathy-android&#34;&gt;این مخزن&lt;/a&gt; منتشر شده، می‌دانم که متن باز کردن چنین برنامه‌ای برای افراد سود چندانی نخواهد داشت چرا که برای این ایده‌ی خاص نوشته شده، ولی شما می‌توانید از تکنیک‌های مورد استفاده در این پروژه استفاده کنید مثل همین گزارش گیری خطاهای رخ داده و یا استفاده از &lt;code&gt;Realm&lt;/code&gt; برای ذخیره اطلاعات.
&lt;/p&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>عیدی ۹۵</title>
      <link>http://atahani.com/retrofit-tutorial</link>
      <pubDate>Tue, 15 Mar 2016 09:48:14 +0330</pubDate>
      
      <guid>http://atahani.com/retrofit-tutorial</guid>
      <description>&lt;p align=&#34;justify&#34;&gt;
  &lt;p&gt;&lt;strong&gt;به روز رسانی&lt;/strong&gt; 👈 ویدیوها در در وب سایت فرانش منتشر شده است، می‌توانید به رایگان از &lt;a href=&#34;https://faranesh.com/programming/14946-retrofit-in-android&#34;&gt;این دوره&lt;/a&gt; بهره ببرید 😉&lt;p align=&#34;justify&#34;&gt;
  &lt;p align=&#34;justify&#34;&gt;
  عیدی ۹۵ از این توییت شروع شد 😬
&lt;/p&gt;&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p lang=&#34;fa&#34; dir=&#34;rtl&#34;&gt;پیشنهاد: به عنوان عیدی یه تکنیک ساده ولی جذاب و کاربردی در دنیای برنامه‌نویسی به صورت ویدیویی آموزش بدهیم و بعد در یوتیوب به اشتراک بگذاریم!&lt;/p&gt;&amp;mdash; Ahmad Tahani (@atahani) &lt;a href=&#34;https://twitter.com/atahani/status/707296099204210688&#34;&gt;March 8, 2016&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p align=&#34;justify&#34;&gt;
  خودم بین چند موضوع تردید داشتم تا بلاخره به پیشنهاد دوست توییتریم &lt;a href=&#34;https://twitter/alireza94&#34;&gt;علیرضا احمدی&lt;/a&gt; و همچنین با توجه به نبود دوره‌‌ی آموزشی مرتبط، موضوع &amp;ldquo;استفاده از Retrofit در اندروید&amp;rdquo; را انتخاب کردم، این موضوع به نحوی بود که باید حتماً سمت سرور را نیز پوشش می‌دادم، اول با خودم فکر کردم خوب میرم از یک پروژه Node.js ای مثل &lt;a href=&#34;http://jsonplaceholder.typicode.com/&#34;&gt;JSONPlaceholder&lt;/a&gt; استفاده می‌کنم، ولی بعد گفتم خیلی خوب میشود این دوره مفاهیم Authentication را نیز پوشش بدهد، برای همین به کلم زد و پروژه سمت سرور را نیز با Node.js بدون استفاده از دیتابیس درست کردم، حدوداً یک روزی وقت برد، کم کم پروژه‌ی این دوره واسه خودش یه پروژه کوچک جالب شد، به عنوان ایده سرویس توییتر را در نظر گرفتم، اسم برنامه را هم Fake Twitter گذاشتم، احتمالاً با خودتون می‌گوئید شاید بهتر بود یک توییتر کلاینت براساس API توییتر می‌نوشتم، ولی خوب چون می‌خواستم تیکنیک‌های authentication را به صورت کامل در یک سیستم ساده بیان کنم تصمیم گرفتم براساس یک نمونه API ساده بنویسم، در کل تجربه‌ی خیلی جالبی بود.
&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/Nj8MEoFuS8k&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;iframe src=&#34;https://docs.google.com/presentation/d/1IcHx4_BOo6LXi92zKSMWH_97ak7e_SSgnrgghu1Lnh4/embed?start=false&amp;loop=false&amp;delayms=3000&#34; frameborder=&#34;0&#34; width=&#34;480&#34; height=&#34;299&#34; allowfullscreen=&#34;true&#34; mozallowfullscreen=&#34;true&#34; webkitallowfullscreen=&#34;true&#34;&gt;&lt;/iframe&gt;

&lt;p align=&#34;justify&#34;&gt;
  اسلایدهای این دوره را می‌توانید در &lt;a href=&#34;https://goo.gl/lzwXys&#34;&gt;گوگل اسلاید&lt;/a&gt; ببینید، همچنین پروژه‌ی سمت سرور و پروژه‌ی اندروید در &lt;a href=&#34;https://github.com/atahani&#34;&gt;گیت‌هاب اینجانب&lt;/a&gt; منتشر شده است، ویدیوها را هم که فعلاً در &lt;a href=&#34;https://www.youtube.com/playlist?list=PL-0EQDLPE23N3WkenBrZzTLfnOIAIybKm&#34;&gt;یوتیوب&lt;/a&gt; منتشر شده، برای وب سایت خوب &lt;a href=&#34;https://faranesh.com&#34;&gt;فرانش&lt;/a&gt; نیز آپلود کرده‌ام امیدوارم تا قبل از عید این دوره را منتشر بکنند.
&lt;/p&gt;

&lt;p align=&#34;justify&#34;&gt;
  🙌 هنوز دیر نشده شما هم می‌توانید یه تکنیک ساده و کاربری را به صورت ویدیو آموزش داده و در یوتیوب و یا آپارت به اشتراک بگذارید، لازم نیست یه دوره کامل باشه، بعضی مواقع حتی یک ویدیوی ساده‌ی آموزشی می‌تواند شروع خوبی برای یادگیری یک تکنیک باشد !
&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;/p&gt;

</description>
    </item>
    
  </channel>
</rss>